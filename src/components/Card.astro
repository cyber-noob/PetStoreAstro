---
import { Button } from "@mui/material";

interface Props {
  item: object;
}

const { item } = Astro.props;
const cardData = new Map(Object.entries(item));
const title = cardData.get("Title");
const price = cardData.get("Price");
const id = cardData.get("id");
console.log("id -> " + id);

cardData.delete("Title");
cardData.delete("Price");
cardData.delete("id");
---

<div id={id} class="card-child" onclick="location.href = '/pdp?id=' + id">
  <div class="plp-img">
    <img
      class="p-8 rounded-t-lg"
      src="https://www.thesprucepets.com/thmb/_1iWuPzSPKMItHCErr55PRPbc2U=/800x0/filters:no_upscale():strip_icc()/40386520_272666870012786_5732696489881099002_n-5b98360ac9e77c0050fa8a73.jpg"
      alt="product image"
    />
  </div>
  <div>
    <a>
      <h2 class="title-font">
        {title}
      </h2>
    </a>
    <div class="tableContainer">
      {
        Array.from(cardData.keys()).map((key) => (
          <div class="index-row">
            <div class="index-rowKey">{key}</div>
            <div class="index-rowValue">{cardData.get(key)}</div>
          </div>
        ))
      }
    </div>

    <div class="side-to-side">
      <div class="grid-parent">
        <div class="grid-child">
          <a class="price">INR {price}</a>
        </div>
      </div>

      <div class="grid-parent">
        <div class="grid-child">
          <Button variant="contained" size="small">Add to Cart</Button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .plp-img {
    padding: 3%;
  }
  .card-child {
    width: 100%;
    max-width: 24rem /* 384px */;
    margin: 3%;
    background-color: white;
    border-color: gray;
    border-radius: 0.5rem /* 8px */;
    box-shadow: 6px 6px 10px -10px #000000;
  }
  .link-card {
    list-style: none;
    display: flex;
    padding: 1px;
    background-color: #23262d;
    background-image: none;
    background-size: 400%;
    border-radius: 7px;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }
  .link-card > a {
    width: 100%;
    text-decoration: none;
    line-height: 1.4;
    padding: calc(1.5rem - 1px);
    border-radius: 8px;
    color: white;
    background-color: #23262d;
    opacity: 0.8;
  }
  h2 {
    margin: 0;
    font-size: 1.25rem;
    transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
  }
  p {
    margin-top: 0.5rem;
    margin-bottom: 0;
  }
  .link-card:is(:hover, :focus-within) {
    background-position: 0;
    background-image: var(--accent-gradient);
  }
  .link-card:is(:hover, :focus-within) h2 {
    color: rgb(var(--accent-light));
  }
  .title-font {
    font-weight: bolder;
    font-size: 20px;
    color: rgb(0, 0, 0);
    padding-left: 5%;
    padding-right: 5%;
    padding-bottom: 5%;
    margin-top: 5%;
  }
  .grid-parent {
    display: grid;
    grid-gap: 1px;
    width: 50%;
    padding: 5%;
  }

  .grid-child {
    margin: 1px;
  }

  .side-to-side {
    display: flex;
    align-items: stretch;
  }
  .key {
    font-weight: bold;
    color: rgb(60, 60, 60);
  }
  .value {
    font-weight: bold;
    color: rgb(124, 124, 124);
  }
  .price {
    font-weight: bolder;
    font-size: 20px;
    color: rgb(0, 0, 0);
  }

  .tableContainer {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: start;
    -ms-flex-pack: start;
    justify-content: flex-start;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    margin-top: 3%;
  }

  .index-row {
    position: relative;
    border-bottom: 1px solid #eaeaec;
    margin: 0 0 12px;
    padding-bottom: 3%;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding-left: 10%;
    padding-right: 10%;
  }

  .index-rowKey {
    color: #7e818c;
    font-size: 16px;
    line-height: 1;
    margin-bottom: 5px;
    font-weight: bolder;
    font-style: oblique;
  }

  .index-rowValue {
    color: #282c3f;
    font-size: 16px;
    font-weight: bold;
    line-height: 1.2;
    font-style: italic;
  }
</style>

<script>
  let pdpcards = document.getElementsByClassName("card-parent");
  for (let i = 0; i < pdpcards.length; i++) {
    let card = pdpcards.item(i);
    card.addEventListener(
      "click",
      async (event) => {
        event.preventDefault();
        console.log("card -> " + card.getAttribute("id"));
        location.href = "/pdp?id=" + card.getAttribute("id");
      },
      false
    );
  }
</script>
