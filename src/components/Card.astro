---
import { Button } from "@mui/material";

interface Props {
  item: object;
}

const { item } = Astro.props;
const cardData = new Map(Object.entries(item));
const title = cardData.get("Title");
const price = cardData.get("Price");
const id = cardData.get("id");
console.log('id -> ' + id);

cardData.delete("Title");
cardData.delete("Price");
cardData.delete("id");
---

<div class="card-parent" id="card-parent">
  <div id={id} class="card-child" onclick= "location.href = '/pdp?id=' + id">
    <a>
      <img
        class="p-8 rounded-t-lg"
        src="https://www.thesprucepets.com/thmb/_1iWuPzSPKMItHCErr55PRPbc2U=/800x0/filters:no_upscale():strip_icc()/40386520_272666870012786_5732696489881099002_n-5b98360ac9e77c0050fa8a73.jpg"
        alt="product image"
      />
    </a>
    <div>
      <a>
        <h2 class="title-font">
          {title}
        </h2>
      </a>
      <div class="side-to-side">
        <div class="grid-parent">
          {
            Array.from(cardData.keys()).map((key) => (
              <div class="grid-child">
                <h3 class="key">{key}: </h3>
              </div>
            ))
          }
        </div>

        <div class="grid-parent">
          {
            Array.from(cardData.values()).map((key) => (
              <div class="grid-child">
                <h3 class="value">{key} </h3>
              </div>
            ))
          }
        </div>
      </div>

      <div class="side-to-side">
        <div class="grid-parent">
          <div class="grid-child">
            <a class="price">INR {price}</a>
          </div>
        </div>

        <div class="grid-parent">
          <div class="grid-child">
            <Button variant="contained" size="small">Add to Cart</Button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .card-parent {
    padding-top: 10%;
    height: 80%;
  }
  .card-child {
    width: 100%;
    max-width: 24rem /* 384px */;
    background-color: white;
    border-color: gray;
    border-radius: 0.5rem /* 8px */;
    --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),
      0 1px 2px -1px var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),
      var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
  }
  .link-card {
    list-style: none;
    display: flex;
    padding: 1px;
    background-color: #23262d;
    background-image: none;
    background-size: 400%;
    border-radius: 7px;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }
  .link-card > a {
    width: 100%;
    text-decoration: none;
    line-height: 1.4;
    padding: calc(1.5rem - 1px);
    border-radius: 8px;
    color: white;
    background-color: #23262d;
    opacity: 0.8;
  }
  h2 {
    margin: 0;
    font-size: 1.25rem;
    transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
  }
  p {
    margin-top: 0.5rem;
    margin-bottom: 0;
  }
  .link-card:is(:hover, :focus-within) {
    background-position: 0;
    background-image: var(--accent-gradient);
  }
  .link-card:is(:hover, :focus-within) h2 {
    color: rgb(var(--accent-light));
  }
  .title-font {
    font-weight: bolder;
    font-size: 20px;
    color: rgb(0, 0, 0);
    padding-left: 5%;
    padding-right: 5%;
    padding-bottom: 5%;
  }
  .grid-parent {
    display: grid;
    grid-gap: 1px;
    width: 50%;
    padding: 5%;
  }

  .grid-child {
    margin: 1px;
  }

  .side-to-side {
    display: flex;
    align-items: stretch;
  }
  .key {
    font-weight: bold;
    color: rgb(60, 60, 60);
  }
  .value {
    font-weight: bold;
    color: rgb(124, 124, 124);
  }
  .price {
    font-weight: bolder;
    font-size: 20px;
    color: rgb(0, 0, 0);
  }
</style>

<script>
  let pdpcards = document.getElementsByClassName("card-parent");
  console.log('cadds >> ' + pdpcards);
  pdpcards.forEach((card) => {
    card.addEventListener(
      "click",
      async (event) => {
        event.preventDefault();
        console.log('card -> ' + card.getAtribute('id'))
        location.href = "/pdp?id=" + card.getAtribute('id');
      },
      false
    );
  });
</script>
